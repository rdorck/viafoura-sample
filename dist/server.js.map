{"version":3,"sources":["../server.js"],"names":["express","require","app","jwt","jwtAuthz","jwksRsa","cors","config","process","env","AUTH0_DOMAIN","AUTH0_AUDIENCE","use","checkJwt","secret","expressJwtSecret","cache","rateLimit","jwksRequestsPerMinute","jwksUri","audience","issuer","algorithms","checkScopes","checkScopesAdmin","get","req","res","json","message","post","listen","console","log"],"mappings":";;AAAA,IAAMA,UAAUC,QAAQ,SAAR,CAAhB;AACA,IAAMC,MAAMF,SAAZ;AACA,IAAMG,MAAMF,QAAQ,aAAR,CAAZ;AACA,IAAMG,WAAWH,QAAQ,mBAAR,CAAjB;AACA,IAAMI,UAAUJ,QAAQ,UAAR,CAAhB;AACA,IAAMK,OAAOL,QAAQ,MAAR,CAAb;AACAA,QAAQ,QAAR,EAAkBM,MAAlB;;AAEA,IAAI,CAACC,QAAQC,GAAR,CAAYC,YAAb,IAA6B,CAACF,QAAQC,GAAR,CAAYE,cAA9C,EAA8D;AAC5D,QAAM,uEAAN;AACD;;AAEDT,IAAIU,GAAJ,CAAQN,MAAR;;AAEA,IAAMO,WAAWV,IAAI;AACnB;AACAW,UAAQT,QAAQU,gBAAR,CAAyB;AAC/BC,WAAO,IADwB;AAE/BC,eAAW,IAFoB;AAG/BC,2BAAuB,CAHQ;AAI/BC,0BAAoBX,QAAQC,GAAR,CAAYC,YAAhC;AAJ+B,GAAzB,CAFW;;AASnB;AACAU,YAAUZ,QAAQC,GAAR,CAAYE,cAVH;AAWnBU,uBAAmBb,QAAQC,GAAR,CAAYC,YAA/B,MAXmB;AAYnBY,cAAY,CAAC,OAAD;AAZO,CAAJ,CAAjB;;AAeA,IAAMC,cAAcnB,SAAS,CAAE,eAAF,CAAT,CAApB;AACA,IAAMoB,mBAAmBpB,SAAS,CAAE,gBAAF,CAAT,CAAzB;;AAEAF,IAAIuB,GAAJ,CAAQ,aAAR,EAAuB,UAASC,GAAT,EAAcC,GAAd,EAAmB;AACxCA,MAAIC,IAAJ,CAAS,EAAEC,SAAS,+EAAX,EAAT;AACD,CAFD;;AAIA3B,IAAIuB,GAAJ,CAAQ,cAAR,EAAwBZ,QAAxB,EAAkCU,WAAlC,EAA+C,UAASG,GAAT,EAAcC,GAAd,EAAmB;AAChEA,MAAIC,IAAJ,CAAS,EAAEC,SAAS,4GAAX,EAAT;AACD,CAFD;;AAIA3B,IAAI4B,IAAJ,CAAS,YAAT,EAAuBjB,QAAvB,EAAiCW,gBAAjC,EAAmD,UAASE,GAAT,EAAcC,GAAd,EAAmB;AACpEA,MAAIC,IAAJ,CAAS,EAAEC,SAAS,4GAAX,EAAT;AACD,CAFD;;AAIA3B,IAAI6B,MAAJ,CAAW,IAAX;AACAC,QAAQC,GAAR,CAAY,oCAAZ","file":"server.js","sourcesContent":["const express = require('express');\nconst app = express();\nconst jwt = require('express-jwt');\nconst jwtAuthz = require('express-jwt-authz');\nconst jwksRsa = require('jwks-rsa');\nconst cors = require('cors');\nrequire('dotenv').config();\n\nif (!process.env.AUTH0_DOMAIN || !process.env.AUTH0_AUDIENCE) {\n  throw 'Make sure you have AUTH0_DOMAIN, and AUTH0_AUDIENCE in your .env file'\n}\n\napp.use(cors());\n\nconst checkJwt = jwt({\n  // Dynamically provide a signing key based on the kid in the header and the singing keys provided by the JWKS endpoint.\n  secret: jwksRsa.expressJwtSecret({\n    cache: true,\n    rateLimit: true,\n    jwksRequestsPerMinute: 5,\n    jwksUri: `https://${process.env.AUTH0_DOMAIN}/.well-known/jwks.json`\n  }),\n\n  // Validate the audience and the issuer.\n  audience: process.env.AUTH0_AUDIENCE,\n  issuer: `https://${process.env.AUTH0_DOMAIN}/`,\n  algorithms: ['RS256']\n});\n\nconst checkScopes = jwtAuthz([ 'read:messages' ]);\nconst checkScopesAdmin = jwtAuthz([ 'write:messages' ]);\n\napp.get('/api/public', function(req, res) {\n  res.json({ message: \"Hello from a public endpoint! You don't need to be authenticated to see this.\" });\n});\n\napp.get('/api/private', checkJwt, checkScopes, function(req, res) {\n  res.json({ message: \"Hello from a private endpoint! You need to be authenticated and have a scope of read:messages to see this.\" });\n});\n\napp.post('/api/admin', checkJwt, checkScopesAdmin, function(req, res) {\n  res.json({ message: \"Hello from an admin endpoint! You need to be authenticated and have a scope of write:messages to see this.\" });\n});\n\napp.listen(3001);\nconsole.log('Listening on http://localhost:3001');\n"]}